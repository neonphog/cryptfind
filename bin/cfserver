#!/usr/bin/env node
'use strict'

/*
 * cfserver - Crypto-Currency Exchange Rate Tracker
 *  - Periodically polls exchanges for ticker data
 *  - Hosts api for accessing data
 *  - Hosts web app for browsing the data
 */

const fs = require('fs')
const Exchange = require('../lib/exchange/exchange').Exchange
const Cache = require('../lib/cache').Cache
const Server = require('../lib/server/server').Server

const CONFIG_FN = 'cfserverconfig.json'

// set up default config values
let config = {
  exchanges: {
    pollFrequency: 60000, // every 1 minute
    exchangeList: []
  },
  server: {
    port: 18080
  },
  cache: {
    cacheFileName: '.cryptfindcache',
    diskSyncFrequency: 5000, // every 5 seconds
    keepCount: 200
  }
}

/**
 * Read in config file writing values on top of defaults
 */
function readConfig () {
  let data = JSON.parse(fs.readFileSync(CONFIG_FN, 'utf8'))
  ;['exchanges', 'server', 'cache'].forEach((group) => {
    if (!data[group]) {
      return
    }
    for (let key in data[group]) {
      // consider any lines starting with '#' as comments
      if (!key.startsWith('#')) {
        config[group][key] = data[group][key]
      }
    }
  })
}

/**
 * entrypoint function
 */
function main () {
  readConfig()

  console.log('Starting CryptFind Server Daemon Process...')
  console.log('Web server at: http://127.0.0.1:' + config.server.port)
  console.log('(ctrl-c to stop)')

  let cache = new Cache(config.cache)
  let exMain = new Exchange(config.exchanges)
  let serv = new Server(config.server, cache)

  // the fetch loop will poll exchanges for data
  let fetchLoop = () => {
    exMain.fetch().then((res) => {
      cache.add(Date.now(), res)
    }, (err) => {
      console.error(err)
    })
  }

  let fetchLoopId = setInterval(fetchLoop, config.exchanges.pollFrequency)
  fetchLoop()

  // on ctrl-c shut down cleanly, saving to disk if needed
  process.on('SIGINT', () => {
    console.log('shutting down CryptFind Server...')
    clearInterval(fetchLoopId)
    cache.sync()
    cache.destroy()
    serv.destroy()
  })
}

// execute entrypoint
main()

