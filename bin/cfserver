#!/usr/bin/env node
'use strict'

const fs = require('fs')
const daemon = require('daemon')
const Exchange = require('../lib/exchange/exchange').Exchange
const Cache = require('../lib/cache').Cache
const Server = require('../lib/server/server').Server

const PIDFILE = '.cfserver.pid'

/**
 */
function killWait(pid, sig) {
  return new Promise((resolve, reject) => {
    try {
      process.kill(pid, sig)
    } catch (e) { /* pass */ }
    let start = Date.now()
    let check = () => {
      try {
        process.kill(pid, 0)
      } catch (e) {
        resolve('process killed')
      }
      if (Date.now() - start > 2000) {
        reject('timeout')
        return
      }
      setTimeout(check, 200)
    }
    check()
  })
}

/**
 * entrypoint function
 */
function main () {
  let lastpid = null

  try {
    lastpid = JSON.parse(fs.readFileSync(PIDFILE))
  } catch (e) { /* pass */ }

  if (process.argv.length > 2) {
    if (lastpid) {
      console.log('attempting to terminate process ' + lastpid)
      killWait(lastpid, 'SIGINT').then(() => {
        console.log('process exited gracefully')
        fs.unlink(PIDFILE)
      }, () => {
        killWait(lastpid, 'SIGKILL').then(() => {
          console.log('killed process')
          fs.unlink(PIDFILE)
        }, () => {
          console.error('failed to kill process ' + lastpid)
        })
      })
      return
    } else {
      console.log('usage -> no args = start server / args of any kind = stop server')
      return
    }
  }

  if (lastpid) {
    console.log(`Found ${PIDFILE} === ${lastpid} stop the process or delete the pidfile`)
    return
  }

  console.log('Starting CryptFind Server Daemon Process...')

  daemon()

  try {
    fs.writeFileSync(PIDFILE, JSON.stringify(process.pid))
  } catch (e) {
    console.error('error writing pidfile, bail')
    return
  }

  let cache = new Cache()
  let exMain = new Exchange()
  let serv = new Server(cache)

  let fetchLoop = () => {
    exMain.fetch().then((res) => {
      cache.add(Date.now(), res)
    }, (err) => {
      console.error(err)
    })
  }

  let fetchLoopId = setInterval(fetchLoop, 5000)
  fetchLoop()

  process.on('SIGINT', () => {
    console.log('shutting down CryptFind Server...')
    clearInterval(fetchLoopId)
    cache.sync()
    cache.destroy()
    serv.destroy()
  })
}

// execute entrypoint
main()

